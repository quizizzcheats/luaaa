-- Lua Script for Roblox to connect to API
-- Requires HTTP and JSON libraries (Roblox environment)

local HttpService = game:GetService("HttpService")
local AnalyticsService = game:GetService("RbxAnalyticsService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

-- Custom functions and setup
local requestSending = false
local fSetClipboard, fRequest, fStringChar, fToString, fStringSub, fOsTime, fMathRandom, fMathFloor, fGetHwid = setclipboard or toclipboard, request or http_request, string.char, tostring, string.sub, os.time, math.random, math.floor, gethwid or function() return AnalyticsService:GetClientId() end

function lEncode(data)
    return HttpService:JSONEncode(data)
end

function lDecode(data)
    local success, result = pcall(HttpService.JSONDecode, HttpService, data)
    if success then
        return result
    else
        print("JSON Decode Error: " .. tostring(result))
        return {}
    end
end

local function lDigest(input)
    local inputStr = tostring(input)
    local hash = {}
    for i = 1, #inputStr do
        table.insert(hash, string.byte(inputStr, i))
    end
    local hashHex = ""
    for _, byte in ipairs(hash) do
        hashHex = hashHex .. string.format("%02x", byte)
    end
    -- Truncate to 64 characters to avoid exceeding database column length
    return hashHex:sub(1, 64)
end

-- Fixed API host
-- CHANGE THIS: Replace with your API host if different (e.g., "https://your-api.com")
local host = "http://localhost:8000"

-- Function to activate key with HWID
function activate_key(key)
    if requestSending then
        print("Request already in progress, please wait.")
        return false
    end
    requestSending = true

    local hwid = fGetHwid()  -- Get Roblox Client ID as HWID
    print("Activating key: " .. tostring(key) .. " with HWID: " .. tostring(hwid))
    local body = lEncode({key = key, hwid = hwid})
    local response = fRequest({
        Url = host .. "/activate",
        Method = "POST",
        Body = body,
        Headers = {
            ["Content-Type"] = "application/json"
        }
    })

    requestSending = false

    if response and response.StatusCode == 200 then
        local decoded = lDecode(response.Body or "{}")
        if decoded.status == "success" then
            print("Activated successfully")
            -- Wait 1 second, kick, and rejoin
            task.wait(1)
            print("Kicking player and auto-rejoining...")
            local placeId = game.PlaceId
            local player = Players.LocalPlayer
            if player then
                TeleportService:Teleport(placeId, player)
            else
                print("Error: LocalPlayer not found")
            end
            return true
        else
            print("Error: " .. (decoded.message or "No error message provided"))
            return false
        end
    else
        local errorMsg = "HTTP Error: "
        if response then
            errorMsg = errorMsg .. "Status " .. tostring(response.StatusCode) .. " - " .. (response.Body or "No response body")
        else
            errorMsg = errorMsg .. "No response received"
        end
        print(errorMsg)
        return false
    end
end

-- Function to check key and HWID
function check_key(key)
    if requestSending then
        print("Request already in progress, please wait.")
        return false
    end
    requestSending = true

    local hwid = fGetHwid()
    print("Checking key: " .. tostring(key) .. " with HWID: " .. tostring(hwid))
    local body = lEncode({key = key, hwid = hwid})
    local response = fRequest({
        Url = host .. "/check",
        Method = "POST",
        Body = body,
        Headers = {
            ["Content-Type"] = "application/json"
        }
    })

    requestSending = false

    if response and response.StatusCode == 200 then
        local decoded = lDecode(response.Body or "{}")
        if decoded.message == "Plea Contack admin for ResetHwid" then
            print("Plea Contack admin for ResetHwid")
            return false
        elseif decoded.message == "HWID not set, requires activation" or decoded.activated == 0 then
            print("Key not activated or HWID not set, attempting to activate...")
            return activate_key(key)
        elseif decoded.status == "success" and decoded.activated == 1 then
            print("Key valid")
            -- Run Infinite Yield script
            print("Executing Infinite Yield...")
            loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
            return true
        else
            print("Invalid: " .. (decoded.message or "No error message provided"))
            return false
        end
    else
        local errorMsg = "HTTP Error: "
        if response then
            errorMsg = errorMsg .. "Status " .. tostring(response.StatusCode) .. " - " .. (response.Body or "No response body")
        else
            errorMsg = errorMsg .. "No response received"
        end
        print(errorMsg)
        return false
    end
end

-- Usage example
-- CHANGE THIS: Replace with your key input method (e.g., TextBox GUI or hardcoded key)
local my_key = "FREEN0GCT8LYBUTNTQVY9OW6H"  -- Replace with actual key (e.g., from user input)
check_key(my_key)
